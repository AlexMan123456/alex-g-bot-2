{"version":3,"sources":["../../../src/interaction-handlers/evalModalHandler/index.ts"],"sourcesContent":["import { InteractionHandler, InteractionHandlerTypes } from \"@sapphire/framework\";\nimport type { ModalSubmitInteraction } from \"discord.js\";\nimport { MessageFlags } from \"discord.js\";\nimport evaluateCode from \"src/interaction-handlers/evalModalHandler/_evaluate-code\";\nimport formatEvalResponse from \"src/interaction-handlers/evalModalHandler/_format-eval-response\";\n\nclass EvalModalHandler extends InteractionHandler {\n  public constructor(\n    context: InteractionHandler.LoaderContext,\n    options: InteractionHandler.Options,\n  ) {\n    super(context, {\n      ...options,\n      interactionHandlerType: InteractionHandlerTypes.ModalSubmit,\n    });\n  }\n\n  public override parse(interaction: ModalSubmitInteraction) {\n    if (interaction.customId === \"eval\") {\n      return this.some();\n    }\n    return this.none();\n  }\n\n  public override async run(interaction: ModalSubmitInteraction) {\n    const code = interaction.fields.getTextInputValue(\"code\");\n    const lineSpacing = interaction.fields.getTextInputValue(\"lineSpacing\");\n    const parsedLineSpacing = lineSpacing !== \"\" ? parseInt(lineSpacing) : 2;\n    const showEnvironmentVariables = interaction.fields.getTextInputValue(\n      \"showEnvironmentVariables\",\n    );\n\n    if (code.includes(\"process.env\") && !showEnvironmentVariables) {\n      const attemptedToAccess = code.split(\".\")[2];\n\n      const container = formatEvalResponse(\n        code,\n        attemptedToAccess\n          ? \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n          : { BOT_TOKEN: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\" },\n        {\n          lineSpacing: parsedLineSpacing,\n          success: false,\n          showEnvironmentVariables: !!showEnvironmentVariables,\n        },\n      );\n      await interaction.reply({ components: [container], flags: MessageFlags.IsComponentsV2 });\n      return;\n    }\n\n    const { evaluatedCode, success } = evaluateCode(code);\n\n    const container = formatEvalResponse(code, evaluatedCode, {\n      lineSpacing: parsedLineSpacing,\n      success,\n      showEnvironmentVariables: !!showEnvironmentVariables,\n    });\n\n    await interaction.reply({ components: [container], flags: MessageFlags.IsComponentsV2 });\n  }\n}\n\nexport default EvalModalHandler;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAA4D;AAE5D,qBAA6B;AAC7B,2BAAyB;AACzB,kCAA+B;AAE/B,MAAM,oBAAN,MAAM,0BAAyB,oCAAmB;AAAA,EACzC,YACL,SACA,SACA;AACA,UAAM,SAAS;AAAA,MACb,GAAG;AAAA,MACH,wBAAwB,yCAAwB;AAAA,IAClD,CAAC;AAAA,EACH;AAAA,EAEgB,MAAM,aAAqC;AACzD,QAAI,YAAY,aAAa,QAAQ;AACnC,aAAO,KAAK,KAAK;AAAA,IACnB;AACA,WAAO,KAAK,KAAK;AAAA,EACnB;AAAA,EAEA,MAAsB,IAAI,aAAqC;AAC7D,UAAM,OAAO,YAAY,OAAO,kBAAkB,MAAM;AACxD,UAAM,cAAc,YAAY,OAAO,kBAAkB,aAAa;AACtE,UAAM,oBAAoB,gBAAgB,KAAK,SAAS,WAAW,IAAI;AACvE,UAAM,2BAA2B,YAAY,OAAO;AAAA,MAClD;AAAA,IACF;AAEA,QAAI,KAAK,SAAS,aAAa,KAAK,CAAC,0BAA0B;AAC7D,YAAM,oBAAoB,KAAK,MAAM,GAAG,EAAE,CAAC;AAE3C,YAAMA,iBAAY,4BAAAC;AAAA,QAChB;AAAA,QACA,oBACI,gDACA,EAAE,WAAW,8CAA8C;AAAA,QAC/D;AAAA,UACE,aAAa;AAAA,UACb,SAAS;AAAA,UACT,0BAA0B,CAAC,CAAC;AAAA,QAC9B;AAAA,MACF;AACA,YAAM,YAAY,MAAM,EAAE,YAAY,CAACD,UAAS,GAAG,OAAO,4BAAa,eAAe,CAAC;AACvF;AAAA,IACF;AAEA,UAAM,EAAE,eAAe,QAAQ,QAAI,qBAAAE,SAAa,IAAI;AAEpD,UAAM,gBAAY,4BAAAD,SAAmB,MAAM,eAAe;AAAA,MACxD,aAAa;AAAA,MACb;AAAA,MACA,0BAA0B,CAAC,CAAC;AAAA,IAC9B,CAAC;AAED,UAAM,YAAY,MAAM,EAAE,YAAY,CAAC,SAAS,GAAG,OAAO,4BAAa,eAAe,CAAC;AAAA,EACzF;AACF;AAtDkD;AAAlD,IAAM,mBAAN;AAwDA,IAAO,2BAAQ;","names":["container","formatEvalResponse","evaluateCode"]}